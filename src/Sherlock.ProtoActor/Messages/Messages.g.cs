// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sherlock.ProtoActor.Messages {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxoOU2hlcmxvY2sucHJvdG8aDFByb3Rvcy5wcm90",
            "byIuCg9BZGRUb0luc3BlY3Rpb24SGwoHQWN0b3JJZBgBIAEoCzIKLmFjdG9y",
            "LlBJRCIJCgdJbnNwZWN0IhkKF0luc3BlY3Rpb25SZXBvcnRSZXF1ZXN0ImsK",
            "C01vbmtleUNyYXNoEioKCmNyYXNoX3R5cGUYASABKA4yFi5Nb25rZXlDcmFz",
            "aC5DcmFzaFR5cGUSDwoHbWVzc2FnZRgCIAEoCSIfCglDcmFzaFR5cGUSEgoO",
            "Q3Jhc2hFeGNlcHRpb24QAEIfqgIcU2hlcmxvY2suUHJvdG9BY3Rvci5NZXNz",
            "YWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sherlock.Services.SherlockReflection.Descriptor, global::Proto.ProtosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.ProtoActor.Messages.AddToInspection), global::Sherlock.ProtoActor.Messages.AddToInspection.Parser, new[]{ "ActorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.ProtoActor.Messages.Inspect), global::Sherlock.ProtoActor.Messages.Inspect.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.ProtoActor.Messages.ReportState), global::Sherlock.ProtoActor.Messages.ReportState.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.ProtoActor.Messages.MonkeyCrash), global::Sherlock.ProtoActor.Messages.MonkeyCrash.Parser, new[]{ "CrashType", "Message" }, null, new[]{ typeof(global::Sherlock.ProtoActor.Messages.MonkeyCrash.Types.CrashType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddToInspection : pb::IMessage<AddToInspection> {
    private static readonly pb::MessageParser<AddToInspection> _parser = new pb::MessageParser<AddToInspection>(() => new AddToInspection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddToInspection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.ProtoActor.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection(AddToInspection other) : this() {
      ActorId = other.actorId_ != null ? other.ActorId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection Clone() {
      return new AddToInspection(this);
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private global::Proto.PID actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddToInspection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddToInspection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ActorId, other.ActorId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actorId_ != null) hash ^= ActorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actorId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actorId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddToInspection other) {
      if (other == null) {
        return;
      }
      if (other.actorId_ != null) {
        if (actorId_ == null) {
          actorId_ = new global::Proto.PID();
        }
        ActorId.MergeFrom(other.ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (actorId_ == null) {
              actorId_ = new global::Proto.PID();
            }
            input.ReadMessage(actorId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Inspect : pb::IMessage<Inspect> {
    private static readonly pb::MessageParser<Inspect> _parser = new pb::MessageParser<Inspect>(() => new Inspect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inspect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.ProtoActor.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect(Inspect other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect Clone() {
      return new Inspect(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inspect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inspect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inspect other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ReportState : pb::IMessage<ReportState> {
    private static readonly pb::MessageParser<ReportState> _parser = new pb::MessageParser<ReportState>(() => new ReportState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.ProtoActor.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportState(ReportState other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportState Clone() {
      return new ReportState(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportState other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MonkeyCrash : pb::IMessage<MonkeyCrash> {
    private static readonly pb::MessageParser<MonkeyCrash> _parser = new pb::MessageParser<MonkeyCrash>(() => new MonkeyCrash());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonkeyCrash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.ProtoActor.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash(MonkeyCrash other) : this() {
      crashType_ = other.crashType_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash Clone() {
      return new MonkeyCrash(this);
    }

    /// <summary>Field number for the "crash_type" field.</summary>
    public const int CrashTypeFieldNumber = 1;
    private global::Sherlock.ProtoActor.Messages.MonkeyCrash.Types.CrashType crashType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sherlock.ProtoActor.Messages.MonkeyCrash.Types.CrashType CrashType {
      get { return crashType_; }
      set {
        crashType_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonkeyCrash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonkeyCrash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrashType != other.CrashType) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrashType != 0) hash ^= CrashType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrashType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CrashType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrashType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CrashType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonkeyCrash other) {
      if (other == null) {
        return;
      }
      if (other.CrashType != 0) {
        CrashType = other.CrashType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            crashType_ = (global::Sherlock.ProtoActor.Messages.MonkeyCrash.Types.CrashType) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonkeyCrash message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CrashType {
        [pbr::OriginalName("CrashException")] CrashException = 0,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
