// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sherlock.Messages {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxoOU2hlcmxvY2sucHJvdG8iJwoUUXVlcnlMb2dz",
            "QW5kTWVzc2FnZXMSDwoHYWN0b3JJZBgBIAEoCSJ2ChNMb2dzQW5kTWVzc2Fn",
            "ZXNEYXRhEg8KB2FjdG9ySWQYASABKAkSKgoITWVzc2FnZXMYAiADKAsyGC5T",
            "aGVybG9jay5UcmFja2VkTWVzc2FnZRIiCgRMb2dzGAMgAygLMhQuU2hlcmxv",
            "Y2suTG9nTWVzc2FnZUIUqgIRU2hlcmxvY2suTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sherlock.Services.SherlockReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.QueryLogsAndMessages), global::Sherlock.Messages.QueryLogsAndMessages.Parser, new[]{ "ActorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.LogsAndMessagesData), global::Sherlock.Messages.LogsAndMessagesData.Parser, new[]{ "ActorId", "Messages", "Logs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QueryLogsAndMessages : pb::IMessage<QueryLogsAndMessages> {
    private static readonly pb::MessageParser<QueryLogsAndMessages> _parser = new pb::MessageParser<QueryLogsAndMessages>(() => new QueryLogsAndMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryLogsAndMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages(QueryLogsAndMessages other) : this() {
      actorId_ = other.actorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages Clone() {
      return new QueryLogsAndMessages(this);
    }

    /// <summary>Field number for the "actorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryLogsAndMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryLogsAndMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorId != other.ActorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryLogsAndMessages other) {
      if (other == null) {
        return;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogsAndMessagesData : pb::IMessage<LogsAndMessagesData> {
    private static readonly pb::MessageParser<LogsAndMessagesData> _parser = new pb::MessageParser<LogsAndMessagesData>(() => new LogsAndMessagesData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogsAndMessagesData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData(LogsAndMessagesData other) : this() {
      actorId_ = other.actorId_;
      messages_ = other.messages_.Clone();
      logs_ = other.logs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData Clone() {
      return new LogsAndMessagesData(this);
    }

    /// <summary>Field number for the "actorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sherlock.Services.TrackedMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(18, global::Sherlock.Services.TrackedMessage.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> messages_ = new pbc::RepeatedField<global::Sherlock.Services.TrackedMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Sherlock.Services.TrackedLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(26, global::Sherlock.Services.TrackedLog.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.TrackedLog> logs_ = new pbc::RepeatedField<global::Sherlock.Services.TrackedLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.TrackedLog> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogsAndMessagesData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogsAndMessagesData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorId != other.ActorId) return false;
      if(!messages_.Equals(other.messages_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      hash ^= messages_.GetHashCode();
      hash ^= logs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActorId);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogsAndMessagesData other) {
      if (other == null) {
        return;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      messages_.Add(other.messages_);
      logs_.Add(other.logs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActorId = input.ReadString();
            break;
          }
          case 18: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 26: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
