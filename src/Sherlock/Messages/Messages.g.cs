// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sherlock.Messages {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxoOU2hlcmxvY2sucHJvdG8aDHByb3Rvcy5wcm90",
            "byIsCg9BZGRUb0luc3BlY3Rpb24SGQoFYWN0b3IYASABKAsyCi5hY3Rvci5Q",
            "SUQiCQoHSW5zcGVjdCIZChdJbnNwZWN0aW9uUmVwb3J0UmVxdWVzdCJrCgtN",
            "b25rZXlDcmFzaBIqCgpjcmFzaF90eXBlGAEgASgOMhYuTW9ua2V5Q3Jhc2gu",
            "Q3Jhc2hUeXBlEg8KB21lc3NhZ2UYAiABKAkiHwoJQ3Jhc2hUeXBlEhIKDkNy",
            "YXNoRXhjZXB0aW9uEAAiJwoUUXVlcnlMb2dzQW5kTWVzc2FnZXMSDwoHYWN0",
            "b3JJZBgBIAEoCSJ2ChNMb2dzQW5kTWVzc2FnZXNEYXRhEg8KB2FjdG9ySWQY",
            "ASABKAkSKgoITWVzc2FnZXMYAiADKAsyGC5TaGVybG9jay5UcmFja2VkTWVz",
            "c2FnZRIiCgRMb2dzGAMgAygLMhQuU2hlcmxvY2suTG9nTWVzc2FnZUIUqgIR",
            "U2hlcmxvY2suTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sherlock.Services.SherlockReflection.Descriptor, global::Proto.ProtosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.AddToInspection), global::Sherlock.Messages.AddToInspection.Parser, new[]{ "Actor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.Inspect), global::Sherlock.Messages.Inspect.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.InspectionReportRequest), global::Sherlock.Messages.InspectionReportRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.MonkeyCrash), global::Sherlock.Messages.MonkeyCrash.Parser, new[]{ "CrashType", "Message" }, null, new[]{ typeof(global::Sherlock.Messages.MonkeyCrash.Types.CrashType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.QueryLogsAndMessages), global::Sherlock.Messages.QueryLogsAndMessages.Parser, new[]{ "ActorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Messages.LogsAndMessagesData), global::Sherlock.Messages.LogsAndMessagesData.Parser, new[]{ "ActorId", "Messages", "Logs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddToInspection : pb::IMessage<AddToInspection> {
    private static readonly pb::MessageParser<AddToInspection> _parser = new pb::MessageParser<AddToInspection>(() => new AddToInspection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddToInspection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection(AddToInspection other) : this() {
      Actor = other.actor_ != null ? other.Actor.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToInspection Clone() {
      return new AddToInspection(this);
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 1;
    private global::Proto.PID actor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddToInspection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddToInspection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Actor, other.Actor)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actor_ != null) hash ^= Actor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Actor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddToInspection other) {
      if (other == null) {
        return;
      }
      if (other.actor_ != null) {
        if (actor_ == null) {
          actor_ = new global::Proto.PID();
        }
        Actor.MergeFrom(other.Actor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (actor_ == null) {
              actor_ = new global::Proto.PID();
            }
            input.ReadMessage(actor_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Inspect : pb::IMessage<Inspect> {
    private static readonly pb::MessageParser<Inspect> _parser = new pb::MessageParser<Inspect>(() => new Inspect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inspect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect(Inspect other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inspect Clone() {
      return new Inspect(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inspect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inspect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inspect other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class InspectionReportRequest : pb::IMessage<InspectionReportRequest> {
    private static readonly pb::MessageParser<InspectionReportRequest> _parser = new pb::MessageParser<InspectionReportRequest>(() => new InspectionReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectionReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportRequest(InspectionReportRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportRequest Clone() {
      return new InspectionReportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectionReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectionReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectionReportRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MonkeyCrash : pb::IMessage<MonkeyCrash> {
    private static readonly pb::MessageParser<MonkeyCrash> _parser = new pb::MessageParser<MonkeyCrash>(() => new MonkeyCrash());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonkeyCrash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash(MonkeyCrash other) : this() {
      crashType_ = other.crashType_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonkeyCrash Clone() {
      return new MonkeyCrash(this);
    }

    /// <summary>Field number for the "crash_type" field.</summary>
    public const int CrashTypeFieldNumber = 1;
    private global::Sherlock.Messages.MonkeyCrash.Types.CrashType crashType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sherlock.Messages.MonkeyCrash.Types.CrashType CrashType {
      get { return crashType_; }
      set {
        crashType_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonkeyCrash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonkeyCrash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrashType != other.CrashType) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrashType != 0) hash ^= CrashType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrashType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CrashType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrashType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CrashType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonkeyCrash other) {
      if (other == null) {
        return;
      }
      if (other.CrashType != 0) {
        CrashType = other.CrashType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            crashType_ = (global::Sherlock.Messages.MonkeyCrash.Types.CrashType) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonkeyCrash message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CrashType {
        [pbr::OriginalName("CrashException")] CrashException = 0,
      }

    }
    #endregion

  }

  public sealed partial class QueryLogsAndMessages : pb::IMessage<QueryLogsAndMessages> {
    private static readonly pb::MessageParser<QueryLogsAndMessages> _parser = new pb::MessageParser<QueryLogsAndMessages>(() => new QueryLogsAndMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryLogsAndMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages(QueryLogsAndMessages other) : this() {
      actorId_ = other.actorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLogsAndMessages Clone() {
      return new QueryLogsAndMessages(this);
    }

    /// <summary>Field number for the "actorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryLogsAndMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryLogsAndMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorId != other.ActorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryLogsAndMessages other) {
      if (other == null) {
        return;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogsAndMessagesData : pb::IMessage<LogsAndMessagesData> {
    private static readonly pb::MessageParser<LogsAndMessagesData> _parser = new pb::MessageParser<LogsAndMessagesData>(() => new LogsAndMessagesData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogsAndMessagesData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData(LogsAndMessagesData other) : this() {
      actorId_ = other.actorId_;
      messages_ = other.messages_.Clone();
      logs_ = other.logs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogsAndMessagesData Clone() {
      return new LogsAndMessagesData(this);
    }

    /// <summary>Field number for the "actorId" field.</summary>
    public const int ActorIdFieldNumber = 1;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sherlock.Services.TrackedMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(18, global::Sherlock.Services.TrackedMessage.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> messages_ = new pbc::RepeatedField<global::Sherlock.Services.TrackedMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Sherlock.Services.LogMessage> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(26, global::Sherlock.Services.LogMessage.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.LogMessage> logs_ = new pbc::RepeatedField<global::Sherlock.Services.LogMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.LogMessage> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogsAndMessagesData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogsAndMessagesData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorId != other.ActorId) return false;
      if(!messages_.Equals(other.messages_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      hash ^= messages_.GetHashCode();
      hash ^= logs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActorId);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogsAndMessagesData other) {
      if (other == null) {
        return;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      messages_.Add(other.messages_);
      logs_.Add(other.logs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActorId = input.ReadString();
            break;
          }
          case 18: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 26: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
