// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Sherlock.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sherlock.Services {

  /// <summary>Holder for reflection information generated from Sherlock.proto</summary>
  public static partial class SherlockReflection {

    #region Descriptor
    /// <summary>File descriptor for Sherlock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SherlockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5TaGVybG9jay5wcm90bxIIU2hlcmxvY2saD3RpbWVzdGFtcC5wcm90bxoM",
            "cHJvdG9zLnByb3RvIp8CCgpMb2dNZXNzYWdlEi0KCXRpbWVzdGFtcBgBIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoIbG9nX3R5cGUYAiAB",
            "KA4yHC5TaGVybG9jay5Mb2dNZXNzYWdlLkxvZ1R5cGUSEwoLbWVzc2FnZV9u",
            "dW0YAyABKAMSDgoGbG9nZ2VyGAQgASgJEhAKCGFjdG9yX2lkGAUgASgJEgwK",
            "BHRleHQYBiABKAkSFgoOZXhjZXB0aW9uX3R5cGUYByABKAkiVQoHTG9nVHlw",
            "ZRILCgdWZXJib3NlEAASCQoFRGVidWcQARIPCgtJbmZvcm1hdGlvbhACEgsK",
            "B1dhcm5pbmcQAxIJCgVFcnJvchAEEgkKBUZhdGFsEAUiMgoITG9nQmF0Y2gS",
            "JgoIbWVzc2FnZXMYASADKAsyFC5TaGVybG9jay5Mb2dNZXNzYWdlIhMKEVRy",
            "YWNrTG9nc1Jlc3BvbnNlItMCCg5UcmFja2VkTWVzc2FnZRIQCghwb3NpdGlv",
            "bhgBIAEoDRIZChFtaWxsaXNfZnJvbV9lcG9jaBgCIAEoAxIaCgZzZW5kZXIY",
            "AyABKAsyCi5hY3Rvci5QSUQSGgoGdGFyZ2V0GAQgASgLMgouYWN0b3IuUElE",
            "EjUKCWRpcmVjdGlvbhgFIAEoDjIiLlNoZXJsb2NrLlRyYWNrZWRNZXNzYWdl",
            "LkRpcmVjdGlvbhI2CgdtZXNzYWdlGAYgAygLMiUuU2hlcmxvY2suVHJhY2tl",
            "ZE1lc3NhZ2UuTWVzc2FnZUVudHJ5EhAKCGFjdG9yX2lkGAcgASgJGi4KDE1l",
            "c3NhZ2VFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIisK",
            "CURpcmVjdGlvbhINCglVbmRlZmluZWQQABIGCgJJbhABEgcKA091dBACIjsK",
            "DU1lc3NhZ2VzQmF0Y2gSKgoIbWVzc2FnZXMYASADKAsyGC5TaGVybG9jay5U",
            "cmFja2VkTWVzc2FnZSIXChVUcmFja01lc3NhZ2VzUmVzcG9uc2Ui2wEKEElu",
            "c3BlY3Rpb25SZXBvcnQSFwoDcGlkGAEgASgLMgouYWN0b3IuUElEEhkKEW1p",
            "bGxpc19mcm9tX2Vwb2NoGAIgASgDEjYKBnN0YXR1cxgDIAMoCzImLlNoZXJs",
            "b2NrLkluc3BlY3Rpb25SZXBvcnQuU3RhdHVzRW50cnkSGgoGY2hpbGRzGAQg",
            "AygLMgouYWN0b3IuUElEEhAKCHdhcm5pbmdzGAUgAygJGi0KC1N0YXR1c0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiGQoXVHJhY2tJ",
            "bnNwZWN0aW9uUmVzcG9uc2UingEKE0luc3BlY3Rpb25SZXBvcnRNYXASOwoH",
            "cmVwb3J0cxgBIAMoCzIqLlNoZXJsb2NrLkluc3BlY3Rpb25SZXBvcnRNYXAu",
            "UmVwb3J0c0VudHJ5GkoKDFJlcG9ydHNFbnRyeRILCgNrZXkYASABKAkSKQoF",
            "dmFsdWUYAiABKAsyGi5TaGVybG9jay5JbnNwZWN0aW9uUmVwb3J0OgI4ATLy",
            "AQoPU2hlcmxvY2tTZXJ2aWNlEj4KCVRyYWNrTG9ncxISLlNoZXJsb2NrLkxv",
            "Z0JhdGNoGhsuU2hlcmxvY2suVHJhY2tMb2dzUmVzcG9uc2UoARJLCg1UcmFj",
            "a01lc3NhZ2VzEhcuU2hlcmxvY2suTWVzc2FnZXNCYXRjaBofLlNoZXJsb2Nr",
            "LlRyYWNrTWVzc2FnZXNSZXNwb25zZSgBElIKD1RyYWNrSW5zcGVjdGlvbhIa",
            "LlNoZXJsb2NrLkluc3BlY3Rpb25SZXBvcnQaIS5TaGVybG9jay5UcmFja0lu",
            "c3BlY3Rpb25SZXNwb25zZSgBQhSqAhFTaGVybG9jay5TZXJ2aWNlc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Proto.ProtosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.LogMessage), global::Sherlock.Services.LogMessage.Parser, new[]{ "Timestamp", "LogType", "MessageNum", "Logger", "ActorId", "Text", "ExceptionType" }, null, new[]{ typeof(global::Sherlock.Services.LogMessage.Types.LogType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.LogBatch), global::Sherlock.Services.LogBatch.Parser, new[]{ "Messages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.TrackLogsResponse), global::Sherlock.Services.TrackLogsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.TrackedMessage), global::Sherlock.Services.TrackedMessage.Parser, new[]{ "Position", "MillisFromEpoch", "Sender", "Target", "Direction", "Message", "ActorId" }, null, new[]{ typeof(global::Sherlock.Services.TrackedMessage.Types.Direction) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.MessagesBatch), global::Sherlock.Services.MessagesBatch.Parser, new[]{ "Messages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.TrackMessagesResponse), global::Sherlock.Services.TrackMessagesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.InspectionReport), global::Sherlock.Services.InspectionReport.Parser, new[]{ "Pid", "MillisFromEpoch", "Status", "Childs", "Warnings" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.TrackInspectionResponse), global::Sherlock.Services.TrackInspectionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sherlock.Services.InspectionReportMap), global::Sherlock.Services.InspectionReportMap.Parser, new[]{ "Reports" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// Log tracking
  /// </summary>
  public sealed partial class LogMessage : pb::IMessage<LogMessage> {
    private static readonly pb::MessageParser<LogMessage> _parser = new pb::MessageParser<LogMessage>(() => new LogMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage(LogMessage other) : this() {
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      logType_ = other.logType_;
      messageNum_ = other.messageNum_;
      logger_ = other.logger_;
      actorId_ = other.actorId_;
      text_ = other.text_;
      exceptionType_ = other.exceptionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage Clone() {
      return new LogMessage(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "log_type" field.</summary>
    public const int LogTypeFieldNumber = 2;
    private global::Sherlock.Services.LogMessage.Types.LogType logType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sherlock.Services.LogMessage.Types.LogType LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "message_num" field.</summary>
    public const int MessageNumFieldNumber = 3;
    private long messageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MessageNum {
      get { return messageNum_; }
      set {
        messageNum_ = value;
      }
    }

    /// <summary>Field number for the "logger" field.</summary>
    public const int LoggerFieldNumber = 4;
    private string logger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logger {
      get { return logger_; }
      set {
        logger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 5;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exception_type" field.</summary>
    public const int ExceptionTypeFieldNumber = 7;
    private string exceptionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExceptionType {
      get { return exceptionType_; }
      set {
        exceptionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (LogType != other.LogType) return false;
      if (MessageNum != other.MessageNum) return false;
      if (Logger != other.Logger) return false;
      if (ActorId != other.ActorId) return false;
      if (Text != other.Text) return false;
      if (ExceptionType != other.ExceptionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (LogType != 0) hash ^= LogType.GetHashCode();
      if (MessageNum != 0L) hash ^= MessageNum.GetHashCode();
      if (Logger.Length != 0) hash ^= Logger.GetHashCode();
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (ExceptionType.Length != 0) hash ^= ExceptionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (LogType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LogType);
      }
      if (MessageNum != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MessageNum);
      }
      if (Logger.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Logger);
      }
      if (ActorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ActorId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (ExceptionType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExceptionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (LogType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogType);
      }
      if (MessageNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MessageNum);
      }
      if (Logger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logger);
      }
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (ExceptionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogMessage other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.LogType != 0) {
        LogType = other.LogType;
      }
      if (other.MessageNum != 0L) {
        MessageNum = other.MessageNum;
      }
      if (other.Logger.Length != 0) {
        Logger = other.Logger;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.ExceptionType.Length != 0) {
        ExceptionType = other.ExceptionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 16: {
            logType_ = (global::Sherlock.Services.LogMessage.Types.LogType) input.ReadEnum();
            break;
          }
          case 24: {
            MessageNum = input.ReadInt64();
            break;
          }
          case 34: {
            Logger = input.ReadString();
            break;
          }
          case 42: {
            ActorId = input.ReadString();
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
          case 58: {
            ExceptionType = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LogType {
        [pbr::OriginalName("Verbose")] Verbose = 0,
        [pbr::OriginalName("Debug")] Debug = 1,
        [pbr::OriginalName("Information")] Information = 2,
        [pbr::OriginalName("Warning")] Warning = 3,
        [pbr::OriginalName("Error")] Error = 4,
        [pbr::OriginalName("Fatal")] Fatal = 5,
      }

    }
    #endregion

  }

  public sealed partial class LogBatch : pb::IMessage<LogBatch> {
    private static readonly pb::MessageParser<LogBatch> _parser = new pb::MessageParser<LogBatch>(() => new LogBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch(LogBatch other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch Clone() {
      return new LogBatch(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sherlock.Services.LogMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Sherlock.Services.LogMessage.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.LogMessage> messages_ = new pbc::RepeatedField<global::Sherlock.Services.LogMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.LogMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogBatch other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackLogsResponse : pb::IMessage<TrackLogsResponse> {
    private static readonly pb::MessageParser<TrackLogsResponse> _parser = new pb::MessageParser<TrackLogsResponse>(() => new TrackLogsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackLogsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackLogsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackLogsResponse(TrackLogsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackLogsResponse Clone() {
      return new TrackLogsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackLogsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackLogsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackLogsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Messages tracking
  /// </summary>
  public sealed partial class TrackedMessage : pb::IMessage<TrackedMessage> {
    private static readonly pb::MessageParser<TrackedMessage> _parser = new pb::MessageParser<TrackedMessage>(() => new TrackedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackedMessage(TrackedMessage other) : this() {
      position_ = other.position_;
      millisFromEpoch_ = other.millisFromEpoch_;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      direction_ = other.direction_;
      message_ = other.message_.Clone();
      actorId_ = other.actorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackedMessage Clone() {
      return new TrackedMessage(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "millis_from_epoch" field.</summary>
    public const int MillisFromEpochFieldNumber = 2;
    private long millisFromEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MillisFromEpoch {
      get { return millisFromEpoch_; }
      set {
        millisFromEpoch_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 3;
    private global::Proto.PID sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private global::Proto.PID target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 5;
    private global::Sherlock.Services.TrackedMessage.Types.Direction direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sherlock.Services.TrackedMessage.Types.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_message_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> message_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Message {
      get { return message_; }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 7;
    private string actorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (MillisFromEpoch != other.MillisFromEpoch) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (Direction != other.Direction) return false;
      if (!Message.Equals(other.Message)) return false;
      if (ActorId != other.ActorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (MillisFromEpoch != 0L) hash ^= MillisFromEpoch.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      hash ^= Message.GetHashCode();
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (MillisFromEpoch != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MillisFromEpoch);
      }
      if (sender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Sender);
      }
      if (target_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Target);
      }
      if (Direction != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Direction);
      }
      message_.WriteTo(output, _map_message_codec);
      if (ActorId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ActorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (MillisFromEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MillisFromEpoch);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      size += message_.CalculateSize(_map_message_codec);
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackedMessage other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.MillisFromEpoch != 0L) {
        MillisFromEpoch = other.MillisFromEpoch;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::Proto.PID();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Proto.PID();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      message_.Add(other.message_);
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 16: {
            MillisFromEpoch = input.ReadInt64();
            break;
          }
          case 26: {
            if (sender_ == null) {
              sender_ = new global::Proto.PID();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 34: {
            if (target_ == null) {
              target_ = new global::Proto.PID();
            }
            input.ReadMessage(target_);
            break;
          }
          case 40: {
            direction_ = (global::Sherlock.Services.TrackedMessage.Types.Direction) input.ReadEnum();
            break;
          }
          case 50: {
            message_.AddEntriesFrom(input, _map_message_codec);
            break;
          }
          case 58: {
            ActorId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TrackedMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Direction {
        [pbr::OriginalName("Undefined")] Undefined = 0,
        [pbr::OriginalName("In")] In = 1,
        [pbr::OriginalName("Out")] Out = 2,
      }

    }
    #endregion

  }

  public sealed partial class MessagesBatch : pb::IMessage<MessagesBatch> {
    private static readonly pb::MessageParser<MessagesBatch> _parser = new pb::MessageParser<MessagesBatch>(() => new MessagesBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagesBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesBatch(MessagesBatch other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagesBatch Clone() {
      return new MessagesBatch(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sherlock.Services.TrackedMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Sherlock.Services.TrackedMessage.Parser);
    private readonly pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> messages_ = new pbc::RepeatedField<global::Sherlock.Services.TrackedMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sherlock.Services.TrackedMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagesBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagesBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagesBatch other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackMessagesResponse : pb::IMessage<TrackMessagesResponse> {
    private static readonly pb::MessageParser<TrackMessagesResponse> _parser = new pb::MessageParser<TrackMessagesResponse>(() => new TrackMessagesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackMessagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackMessagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackMessagesResponse(TrackMessagesResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackMessagesResponse Clone() {
      return new TrackMessagesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackMessagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackMessagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackMessagesResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Inspection
  /// </summary>
  public sealed partial class InspectionReport : pb::IMessage<InspectionReport> {
    private static readonly pb::MessageParser<InspectionReport> _parser = new pb::MessageParser<InspectionReport>(() => new InspectionReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReport(InspectionReport other) : this() {
      Pid = other.pid_ != null ? other.Pid.Clone() : null;
      millisFromEpoch_ = other.millisFromEpoch_;
      status_ = other.status_.Clone();
      childs_ = other.childs_.Clone();
      warnings_ = other.warnings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReport Clone() {
      return new InspectionReport(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private global::Proto.PID pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "millis_from_epoch" field.</summary>
    public const int MillisFromEpochFieldNumber = 2;
    private long millisFromEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MillisFromEpoch {
      get { return millisFromEpoch_; }
      set {
        millisFromEpoch_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_status_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> status_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Status {
      get { return status_; }
    }

    /// <summary>Field number for the "childs" field.</summary>
    public const int ChildsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.PID> _repeated_childs_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.PID.Parser);
    private readonly pbc::RepeatedField<global::Proto.PID> childs_ = new pbc::RepeatedField<global::Proto.PID>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PID> Childs {
      get { return childs_; }
    }

    /// <summary>Field number for the "warnings" field.</summary>
    public const int WarningsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_warnings_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> warnings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Warnings {
      get { return warnings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pid, other.Pid)) return false;
      if (MillisFromEpoch != other.MillisFromEpoch) return false;
      if (!Status.Equals(other.Status)) return false;
      if(!childs_.Equals(other.childs_)) return false;
      if(!warnings_.Equals(other.warnings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pid_ != null) hash ^= Pid.GetHashCode();
      if (MillisFromEpoch != 0L) hash ^= MillisFromEpoch.GetHashCode();
      hash ^= Status.GetHashCode();
      hash ^= childs_.GetHashCode();
      hash ^= warnings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pid);
      }
      if (MillisFromEpoch != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MillisFromEpoch);
      }
      status_.WriteTo(output, _map_status_codec);
      childs_.WriteTo(output, _repeated_childs_codec);
      warnings_.WriteTo(output, _repeated_warnings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pid);
      }
      if (MillisFromEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MillisFromEpoch);
      }
      size += status_.CalculateSize(_map_status_codec);
      size += childs_.CalculateSize(_repeated_childs_codec);
      size += warnings_.CalculateSize(_repeated_warnings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectionReport other) {
      if (other == null) {
        return;
      }
      if (other.pid_ != null) {
        if (pid_ == null) {
          pid_ = new global::Proto.PID();
        }
        Pid.MergeFrom(other.Pid);
      }
      if (other.MillisFromEpoch != 0L) {
        MillisFromEpoch = other.MillisFromEpoch;
      }
      status_.Add(other.status_);
      childs_.Add(other.childs_);
      warnings_.Add(other.warnings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pid_ == null) {
              pid_ = new global::Proto.PID();
            }
            input.ReadMessage(pid_);
            break;
          }
          case 16: {
            MillisFromEpoch = input.ReadInt64();
            break;
          }
          case 26: {
            status_.AddEntriesFrom(input, _map_status_codec);
            break;
          }
          case 34: {
            childs_.AddEntriesFrom(input, _repeated_childs_codec);
            break;
          }
          case 42: {
            warnings_.AddEntriesFrom(input, _repeated_warnings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackInspectionResponse : pb::IMessage<TrackInspectionResponse> {
    private static readonly pb::MessageParser<TrackInspectionResponse> _parser = new pb::MessageParser<TrackInspectionResponse>(() => new TrackInspectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackInspectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInspectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInspectionResponse(TrackInspectionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInspectionResponse Clone() {
      return new TrackInspectionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackInspectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackInspectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackInspectionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class InspectionReportMap : pb::IMessage<InspectionReportMap> {
    private static readonly pb::MessageParser<InspectionReportMap> _parser = new pb::MessageParser<InspectionReportMap>(() => new InspectionReportMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectionReportMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sherlock.Services.SherlockReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportMap(InspectionReportMap other) : this() {
      reports_ = other.reports_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionReportMap Clone() {
      return new InspectionReportMap(this);
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int ReportsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Sherlock.Services.InspectionReport>.Codec _map_reports_codec
        = new pbc::MapField<string, global::Sherlock.Services.InspectionReport>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sherlock.Services.InspectionReport.Parser), 10);
    private readonly pbc::MapField<string, global::Sherlock.Services.InspectionReport> reports_ = new pbc::MapField<string, global::Sherlock.Services.InspectionReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sherlock.Services.InspectionReport> Reports {
      get { return reports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectionReportMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectionReportMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Reports.Equals(other.Reports)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Reports.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reports_.WriteTo(output, _map_reports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reports_.CalculateSize(_map_reports_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectionReportMap other) {
      if (other == null) {
        return;
      }
      reports_.Add(other.reports_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reports_.AddEntriesFrom(input, _map_reports_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
